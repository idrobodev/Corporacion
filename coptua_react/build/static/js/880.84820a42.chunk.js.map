{"version":3,"file":"static/js/880.84820a42.chunk.js","mappings":"kQAUA,MAAMA,EAAiBC,IAAkC,IAAjC,QAAEC,EAAO,UAAEC,EAAY,IAAIF,EACjD,OACEG,EAAAA,EAAAA,MAAA,OAAKD,UAAS,qHAAAE,OAAuHF,GAAYG,SAAA,EAC/IC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,8CACfC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,cAAaG,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,wDACbI,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,oCAAmCG,SAAC,0BACjDF,EAAAA,EAAAA,MAAA,KAAGD,UAAU,kCAAiCG,SAAA,CAAS,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASM,UAAU,EAAG,IAAI,aAE5ED,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,yBAAwBG,UACrCC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,yDAMfM,EAAiBA,KACrB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,MAI7BK,GAAWC,EAAAA,EAAAA,MACXC,GAAcD,EAAAA,EAAAA,MACdE,GAAaF,EAAAA,EAAAA,MAGbG,EAAYC,UAChB,IACER,GAAW,GACXE,EAAS,MACTO,QAAQC,IAAI,kCAEZ,MAAMC,QAAeC,EAAAA,GAAUC,WAG/B,GAFAJ,QAAQC,IAAI,gCAAuBC,GAE/BA,EAAOV,MACT,MAAM,IAAIa,MAAMH,EAAOV,MAAMc,SAAW,yBAG1C,MAAMC,EAAYC,MAAMC,QAAQP,EAAOQ,MAAQR,EAAOQ,KAAO,GAC7DtB,EAASmB,GACTP,QAAQC,IAAI,yBAAqBM,EAAUI,OAC7C,CAAE,MAAOC,GACPZ,QAAQR,MAAM,+BAA2BoB,GACzCnB,EAASmB,EAAIN,SAAW,qCACxBlB,EAAS,GACX,CAAC,QACCG,GAAW,EACb,IAGFsB,EAAAA,EAAAA,WAAU,KACRf,KACC,IAIH,MAAMgB,GAAgBC,EAAAA,EAAAA,SAAQ,IACrBP,MAAMC,QAAQtB,GAASA,EAAQ,GACrC,CAACA,IAEE6B,GAAYD,EAAAA,EAAAA,SAAQ,IAAM,CAC9B,CACEE,MAAO,cACPC,MAAOJ,EAAcH,OACrBQ,KAAM,kBACNC,MAAO,QAET,CACEH,MAAO,UACPC,MAAOJ,EAAcO,OAAOC,GAAkB,WAAbA,EAAEC,QAAqBZ,OACxDQ,KAAM,sBACNC,MAAO,SAET,CACEH,MAAO,YACPC,MAAOJ,EAAcO,OAAOC,GAAkB,aAAbA,EAAEC,QAAuBZ,OAC1DQ,KAAM,sBACNC,MAAO,QAER,CAACN,IAiDJ,OAAIxB,GAEAN,EAAAA,EAAAA,KAACwC,EAAAA,EAAe,CAACP,MAAM,QAAQQ,SAAS,sBAAmBnC,SAAS,EAAMoC,YAAY,sBAItFlC,GAEAR,EAAAA,EAAAA,KAACwC,EAAAA,EAAe,CAACP,MAAM,QAAQQ,SAAS,wBAAwBnC,SAAS,EAAMP,UAC7EC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,4CAA2CG,UACxDC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,iDAAgDG,UAC7DF,EAAAA,EAAAA,MAAA,KAAGD,UAAU,eAAcG,SAAA,CAAC,wBAAsBS,YAQ1DX,EAAAA,EAAAA,MAAC2C,EAAAA,EAAe,CAACP,MAAM,sBAAmBQ,SAAS,0CAAuCE,cACxF9C,EAAAA,EAAAA,MAAA,UACE+C,QAASA,IAAM/B,EAAWgC,YAC1BjD,UAAU,kFAAiFG,SAAA,EAE3FC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,qBAAuB,gBAGvCG,SAAA,EAGCC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,YAAWG,UACxBC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAS,CAACC,MAAOf,EAAWgB,QAAS,OAIxCnD,EAAAA,EAAAA,MAAA,OAAKD,UAAU,YAAWG,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKD,UAAU,OAAMG,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,sCAAqCG,SAAC,oBACpDC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,6BAA4BG,SAAC,qDAGlB,IAAzB+B,EAAcH,QACb9B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,wEAAuEG,SAAA,EACpFC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,iDACbI,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,yCAAwCG,SAAC,6BACvDC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,gBAAeG,SAAC,8DAG/BC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,uDAAsDG,SAClE+B,EAAcmB,IAAKC,IAClBrD,EAAAA,EAAAA,MAAA,OAEED,UAAU,wHACVgD,QAASA,KACPlC,EAASyC,QAAQD,GACjBxC,EAASmC,aACT9C,SAAA,EAGFC,EAAAA,EAAAA,KAACP,EAAc,CACbE,QAASuD,EAAKE,UACdxD,UAAU,uBAIZC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,MAAKG,SAAA,EAClBF,EAAAA,EAAAA,MAAA,OAAKD,UAAU,wCAAuCG,SAAA,EACpDF,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBG,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,2EAA0EG,UACvFC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,6CAEfC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,kFAAiFG,SAC5FmD,EAAKG,UAERrD,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,wBAAuBG,SAAEmD,EAAKI,MAAQ,qBAGvDtD,EAAAA,EAAAA,KAAA,OAAK4C,QAAUW,GAAMA,EAAEC,kBAAkBzD,UACvCC,EAAAA,EAAAA,KAACyD,EAAAA,EAAY,CACXC,cAAeR,EAAKX,OACpBoB,SAAU,CACR,CAAEzB,MAAO,SAAU0B,MAAO,SAAUC,QAAS,WAC7C,CAAE3B,MAAO,WAAY0B,MAAO,WAAYC,QAAS,WAEnDC,SAAWC,GApIZhD,OAAOiD,EAAID,KAC9B,UACQ5C,EAAAA,GAAU8C,WAAWD,EAAI,CAAEzB,OAAQwB,IACzC,MAAM,KAAErC,SAAeP,EAAAA,GAAUC,WACjChB,EAASsB,GAAQ,GACnB,CAAE,MAAOE,GACPZ,QAAQR,MAAM,yBAA0BoB,EAC1C,GA6H6CsC,CAAahB,EAAKc,GAAID,WAKrDlE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,YAAWG,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKD,UAAU,mBAAkBG,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,iEACbI,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,qCAAoCG,SAAEmD,EAAKE,eAGzDF,EAAKiB,WACJtE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBG,SAAA,EAChCC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,mDACbI,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,wBAAuBG,SAAEmD,EAAKiB,cAI9CjB,EAAKkB,mBACJvE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBG,SAAA,EAChCC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,mDACbC,EAAAA,EAAAA,MAAA,KAAGD,UAAU,wBAAuBG,SAAA,CAAC,cAAYmD,EAAKkB,iBAAiB,2BAM7EvE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,uEAAsEG,SAAA,EACnFF,EAAAA,EAAAA,MAAA,UACE+C,QAAUW,IACRA,EAAEC,kBACF9C,EAASyC,QAAQD,GACjBxC,EAASmC,aAEXjD,UAAU,4FAA2FG,SAAA,EAErGC,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,oBAAsB,mBAIrCI,EAAAA,EAAAA,KAAA,OAAK4C,QAAUW,GAAMA,EAAEC,kBAAkBzD,UACvCC,EAAAA,EAAAA,KAACqE,EAAAA,GAAc,CACbC,QAAS,CACP,CACEV,MAAO,eACPzB,KAAM,aACNS,QAASA,KACPlC,EAASyC,QAAQD,GACjBxC,EAASmC,cAGb,CACEe,MAAO,SACPzB,KAAM,cACNS,QAASA,KACPhC,EAAYuC,QAAQD,GACpBtC,EAAYiC,cAGhB,CACEe,MAAO,WACPzB,KAAM,eACNS,QAAS7B,UACHwD,OAAOC,QAAQ,+DAzLtBzD,WACvB,IACER,GAAW,GAGX,MAAMkE,QAA4BtD,EAAAA,GAAUuD,mBAC5C,GAAID,EAAoBjE,MACtB,MAAM,IAAIa,MAAM,8CAGlB,MAAMsD,GAAuBF,EAAoB/C,MAAQ,IAAIW,OAC3DuC,GAAKA,EAAEC,UAAYb,GAAMY,EAAEE,UAAYd,GAAMY,EAAEG,SAAWf,GAG5D,GAAIW,EAAoBhD,OAAS,EAG/B,OAFAqD,MAAM,6CAADlF,OAA8C6E,EAAoBhD,OAAM,gGAC7EpB,GAAW,GAKb,MAAMW,QAAeC,EAAAA,GAAU8D,WAAWjB,GAC1C,GAAI9C,EAAOV,MACT,MAAM,IAAIa,MAAMH,EAAOV,MAAMc,SAAW,gCAIpCR,IACNkE,MAAM,8BACR,CAAE,MAAOpD,GACPZ,QAAQR,MAAM,yBAA0BoB,GACxCoD,MAAMpD,EAAIN,SAAW,0BACrBf,GAAW,EACb,GAyJkC2E,CAAiBhC,EAAKc,KAGhCH,QAAS,uBArGhBX,EAAKc,WAmHpBhE,EAAAA,EAAAA,KAACmF,EAAAA,GAAgB,CACfC,OAAQ1E,EAAS0E,OACjBC,QAAS3E,EAAS4E,WAClBrD,MAAM,sBACNP,KAAMhB,EAASgB,KAAO,CACpB,CAAEkC,MAAO,SAAU1B,MAAOxB,EAASgB,KAAK2B,QACxC,CAAEO,MAAO,eAAa1B,MAAOxB,EAASgB,KAAK0B,UAAWmC,WAAW,GACjE,CAAE3B,MAAO,cAAY1B,MAAOxB,EAASgB,KAAKyC,UAC1C,CAAEP,MAAO,sBAAoB1B,MAAOxB,EAASgB,KAAK0C,iBAAgB,GAAAtE,OAAMY,EAASgB,KAAK0C,iBAAgB,kBAAmB,mBACzH,CAAER,MAAO,SAAU1B,MAAOxB,EAASgB,KAAKa,QACxC,CAAEqB,MAAO,OAAQ1B,MAAOxB,EAASgB,KAAK4B,MAAQ,oBAC5C,MAGNtD,EAAAA,EAAAA,KAACwF,EAAAA,GAAa,CACZJ,OAAQxE,EAAYwE,OACpBC,QAASzE,EAAY0E,WACrBrD,MAAM,cACNwD,SAAU1E,UAER,QAAkC2E,IAA9BC,EAASvB,kBAAgE,OAA9BuB,EAASvB,kBAA2D,KAA9BuB,EAASvB,iBAAyB,CACrH,MAAMwB,EAAYC,OAAOF,EAASvB,kBAClC,GAAI0B,MAAMF,IAAcA,GAAa,EACnC,MAAM,IAAIvE,MAAM,wDAEpB,CAEA,MAAMH,QAAeC,EAAAA,GAAU8C,WAAWrD,EAAYc,KAAKsC,GAAI2B,GAC/D,GAAIzE,EAAOV,MACT,MAAM,IAAIa,MAAMH,EAAOV,MAAMc,SAAW,kCAEpCR,KAERiF,YAAanF,EAAYc,KACzBsE,OAAQ,CACN,CAAEC,KAAM,SAAUrC,MAAO,SAAUsC,KAAM,OAAQC,UAAU,GAC3D,CAAEF,KAAM,WAAYrC,MAAO,cAAYsC,KAAM,OAC7C,CAAED,KAAM,YAAarC,MAAO,eAAasC,KAAM,WAAYC,UAAU,EAAMZ,WAAW,GACtF,CAAEU,KAAM,mBAAoBrC,MAAO,sBAAoBsC,KAAM,SAAUE,YAAa,6BAA2BC,IAAK,GACpH,CACEJ,KAAM,SACNrC,MAAO,SACPsC,KAAM,SACNI,QAAS,CACP,CAAEpE,MAAO,SAAU0B,MAAO,UAC1B,CAAE1B,MAAO,WAAY0B,MAAO,cAGhC,CACEqC,KAAM,OACNrC,MAAO,OACPsC,KAAM,SACNI,QAAS,CACP,CAAEpE,MAAO,YAAa0B,MAAO,aAC7B,CAAE1B,MAAO,aAAc0B,MAAO,cAC9B,CAAE1B,MAAO,WAAY0B,MAAO,kBAMpC5D,EAAAA,EAAAA,KAACuG,EAAAA,GAAe,CACdnB,OAAQvE,EAAWuE,OACnBC,QAASxE,EAAWyE,WACpBrD,MAAM,aACNwD,SAAU1E,UAAqB,IAADyF,EAAAC,EAC5B,GAAoB,QAAhBD,EAACb,EAAStC,cAAM,IAAAmD,IAAfA,EAAiBE,QAA6B,QAAnBD,EAACd,EAASvC,iBAAS,IAAAqD,IAAlBA,EAAoBC,OACnD,MAAM,IAAIrF,MAAM,iDAIlB,QAAkCqE,IAA9BC,EAASvB,kBAAgE,OAA9BuB,EAASvB,kBAA2D,KAA9BuB,EAASvB,iBAAyB,CACrH,MAAMwB,EAAYC,OAAOF,EAASvB,kBAClC,GAAI0B,MAAMF,IAAcA,GAAa,EACnC,MAAM,IAAIvE,MAAM,wDAEpB,CAEA,MAAMH,QAAeC,EAAAA,GAAUwF,WAAWhB,GAC1C,GAAIzE,EAAOV,MACT,MAAM,IAAIa,MAAMH,EAAOV,MAAMc,SAAW,6BAEpCR,KAERiF,YAAa,CACX1C,OAAQ,GACRD,UAAW,GACXe,SAAU,GACVC,iBAAkB,GAClB7B,OAAQ,SACRe,KAAM,aAER0C,OAAQ,CACN,CAAEC,KAAM,SAAUrC,MAAO,SAAUsC,KAAM,OAAQC,UAAU,EAAMC,YAAa,qBAC9E,CAAEH,KAAM,WAAYrC,MAAO,cAAYsC,KAAM,MAAOE,YAAa,4BACjE,CAAEH,KAAM,YAAarC,MAAO,eAAasC,KAAM,WAAYC,UAAU,EAAMC,YAAa,mCAAiCb,WAAW,GACpI,CAAEU,KAAM,mBAAoBrC,MAAO,sBAAoBsC,KAAM,SAAUE,YAAa,6BAA2BC,IAAK,GACpH,CACEJ,KAAM,SACNrC,MAAO,SACPsC,KAAM,SACNI,QAAS,CACP,CAAEpE,MAAO,SAAU0B,MAAO,UAC1B,CAAE1B,MAAO,WAAY0B,MAAO,cAGhC,CACEqC,KAAM,OACNrC,MAAO,OACPsC,KAAM,SACNI,QAAS,CACP,CAAEpE,MAAO,YAAa0B,MAAO,aAC7B,CAAE1B,MAAO,aAAc0B,MAAO,cAC9B,CAAE1B,MAAO,WAAY0B,MAAO,qBAa1C,EAFcgD,EAAAA,KAAW1G,E","sources":["pages/Dashboard/Sedes.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport DashboardLayout from \"components/layout/DashboardLayout\";\nimport { dbService } from \"shared/services\";\nimport { StatsGrid } from \"components/UI/Card\";\nimport { StatusToggle } from \"components/UI/Badge\";\nimport { ActionDropdown } from \"components/UI/Table\";\nimport { ViewDetailsModal, EditFormModal, CreateFormModal } from \"components/common/CRUDModals\";\nimport { useModal } from \"shared/hooks\";\n\n// Simple Map Component\nconst MapPlaceholder = ({ address, className = \"\" }) => {\n  return (\n    <div className={`bg-gradient-to-br from-green-100 to-blue-100 rounded-lg flex items-center justify-center relative overflow-hidden ${className}`}>\n      <div className=\"absolute inset-0 bg-green-500 opacity-10\"></div>\n      <div className=\"text-center\">\n        <i className=\"fas fa-map-marked-alt text-green-600 text-3xl mb-2\"></i>\n        <p className=\"text-xs text-gray-600 font-medium\">Mapa de Ubicación</p>\n        <p className=\"text-xs text-gray-500 mt-1 px-2\">{address?.substring(0, 30)}...</p>\n      </div>\n      <div className=\"absolute top-2 right-2\">\n        <i className=\"fas fa-external-link-alt text-gray-400 text-xs\"></i>\n      </div>\n    </div>\n  );\n};\n\nconst SedesComponent = () => {\n  const [sedes, setSedes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // No filters needed\n  \n  const verModal = useModal();\n  const editarModal = useModal();\n  const crearModal = useModal();\n\n  // Función para cargar sedes\n  const loadSedes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('🔄 Cargando sedes...');\n\n      const result = await dbService.getSedes();\n      console.log('📊 Resultado sedes:', result);\n\n      if (result.error) {\n        throw new Error(result.error.message || 'Error al cargar sedes');\n      }\n\n      const sedesData = Array.isArray(result.data) ? result.data : [];\n      setSedes(sedesData);\n      console.log('✅ Sedes cargadas:', sedesData.length);\n    } catch (err) {\n      console.error('❌ Error cargando sedes:', err);\n      setError(err.message || 'Error desconocido al cargar sedes');\n      setSedes([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadSedes();\n  }, []);\n\n\n\n  const filteredSedes = useMemo(() => {\n    return Array.isArray(sedes) ? sedes : [];\n  }, [sedes]);\n\n  const statsData = useMemo(() => [\n    {\n      title: \"Total Sedes\",\n      value: filteredSedes.length,\n      icon: \"fas fa-building\",\n      color: \"blue\"\n    },\n    {\n      title: \"Activas\",\n      value: filteredSedes.filter(s => s.estado === \"Activa\").length,\n      icon: \"fas fa-check-circle\",\n      color: \"green\"\n    },\n    {\n      title: \"Inactivas\",\n      value: filteredSedes.filter(s => s.estado === \"Inactiva\").length,\n      icon: \"fas fa-times-circle\",\n      color: \"red\"\n    }\n  ], [filteredSedes]);\n\n  const toggleEstado = async (id, newEstado) => {\n    try {\n      await dbService.updateSede(id, { estado: newEstado });\n      const { data } = await dbService.getSedes();\n      setSedes(data || []);\n    } catch (err) {\n      console.error('Error updating status:', err);\n    }\n  };\n\n  const handleDeleteSede = async (id) => {\n    try {\n      setLoading(true);\n      \n      // Verificar si la sede tiene participantes asociados\n      const participantesResult = await dbService.getParticipantes();\n      if (participantesResult.error) {\n        throw new Error('Error al verificar participantes asociados');\n      }\n      \n      const participantesEnSede = (participantesResult.data || []).filter(\n        p => p.id_sede === id || p.sede_id === id || p.sedeId === id\n      );\n      \n      if (participantesEnSede.length > 0) {\n        alert(`No se puede eliminar la sede porque tiene ${participantesEnSede.length} participante(s) asociado(s). Por favor, reasigna o elimina los participantes primero.`);\n        setLoading(false);\n        return;\n      }\n      \n      // Si no hay participantes, proceder con la eliminación\n      const result = await dbService.deleteSede(id);\n      if (result.error) {\n        throw new Error(result.error.message || 'Error al eliminar sede');\n      }\n      \n      // Recargar la lista de sedes\n      await loadSedes();\n      alert('Sede eliminada exitosamente');\n    } catch (err) {\n      console.error('Error eliminando sede:', err);\n      alert(err.message || 'Error al eliminar sede');\n      setLoading(false);\n    }\n  };\n\n\n  if (loading) {\n    return (\n      <DashboardLayout title=\"Sedes\" subtitle=\"Gestión de sedes\" loading={true} loadingText=\"Cargando sedes...\" />\n    );\n  }\n\n  if (error) {\n    return (\n      <DashboardLayout title=\"Sedes\" subtitle=\"Error al cargar datos\" loading={false}>\n        <div className=\"flex items-center justify-center h-screen\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <p className=\"text-red-600\">Error loading sedes: {error}</p>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Gestión de Sedes\" subtitle=\"Administra las sedes de la fundación\" extraActions={\n      <button\n        onClick={() => crearModal.openModal()}\n        className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n      >\n        <i className=\"fas fa-plus mr-2\"></i>\n        Nueva Sede\n      </button>\n    }>\n\n      {/* Estadísticas Rápidas */}\n      <div className=\"px-6 py-4\">\n        <StatsGrid stats={statsData} columns={3} />\n      </div>\n\n      {/* Grid de Sedes */}\n      <div className=\"px-6 py-4\">\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">Lista de Sedes</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Haz clic en una sede para ver más detalles</p>\n        </div>\n\n        {filteredSedes.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center\">\n            <i className=\"fas fa-building text-gray-300 text-4xl mb-4\"></i>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No se encontraron sedes</h3>\n            <p className=\"text-gray-500\">No hay sedes que coincidan con los filtros aplicados.</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredSedes.map((sede) => (\n              <div\n                key={sede.id}\n                className=\"bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-lg transition-all duration-200 cursor-pointer group\"\n                onClick={() => {\n                  verModal.setData(sede);\n                  verModal.openModal();\n                }}\n              >\n                {/* Map */}\n                <MapPlaceholder\n                  address={sede.direccion}\n                  className=\"h-32 rounded-t-xl\"\n                />\n\n                {/* Card Content */}\n                <div className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                        <i className=\"fas fa-building text-blue-600 text-lg\"></i>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors\">\n                          {sede.nombre}\n                        </h3>\n                        <p className=\"text-sm text-gray-500\">{sede.tipo || 'Principal'}</p>\n                      </div>\n                    </div>\n                    <div onClick={(e) => e.stopPropagation()}>\n                      <StatusToggle\n                        currentStatus={sede.estado}\n                        statuses={[\n                          { value: 'Activa', label: 'Activa', variant: 'success' },\n                          { value: 'Inactiva', label: 'Inactiva', variant: 'danger' }\n                        ]}\n                        onChange={(newEstado) => toggleEstado(sede.id, newEstado)}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start\">\n                      <i className=\"fas fa-map-marker-alt text-gray-400 mt-1 mr-3 flex-shrink-0\"></i>\n                      <p className=\"text-sm text-gray-600 line-clamp-2\">{sede.direccion}</p>\n                    </div>\n\n                    {sede.telefono && (\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-phone text-gray-400 mr-3 flex-shrink-0\"></i>\n                        <p className=\"text-sm text-gray-600\">{sede.telefono}</p>\n                      </div>\n                    )}\n\n                    {sede.capacidad_maxima && (\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-users text-gray-400 mr-3 flex-shrink-0\"></i>\n                        <p className=\"text-sm text-gray-600\">Capacidad: {sede.capacidad_maxima} participantes</p>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-100\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        verModal.setData(sede);\n                        verModal.openModal();\n                      }}\n                      className=\"flex items-center text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors\"\n                    >\n                      <i className=\"fas fa-eye mr-2\"></i>\n                      Ver detalles\n                    </button>\n\n                    <div onClick={(e) => e.stopPropagation()}>\n                      <ActionDropdown\n                        actions={[\n                          {\n                            label: 'Ver detalles',\n                            icon: 'fas fa-eye',\n                            onClick: () => {\n                              verModal.setData(sede);\n                              verModal.openModal();\n                            }\n                          },\n                          {\n                            label: 'Editar',\n                            icon: 'fas fa-edit',\n                            onClick: () => {\n                              editarModal.setData(sede);\n                              editarModal.openModal();\n                            }\n                          },\n                          {\n                            label: 'Eliminar',\n                            icon: 'fas fa-trash',\n                            onClick: async () => {\n                              if (window.confirm('¿Estás seguro de que deseas eliminar esta sede?')) {\n                                await handleDeleteSede(sede.id);\n                              }\n                            },\n                            variant: 'danger'\n                          }\n                        ]}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Modales */}\n      <ViewDetailsModal\n        isOpen={verModal.isOpen}\n        onClose={verModal.closeModal}\n        title=\"Detalles de la Sede\"\n        data={verModal.data ? [\n          { label: 'Nombre', value: verModal.data.nombre },\n          { label: 'Dirección', value: verModal.data.direccion, fullWidth: true },\n          { label: 'Teléfono', value: verModal.data.telefono },\n          { label: 'Capacidad Máxima', value: verModal.data.capacidad_maxima ? `${verModal.data.capacidad_maxima} participantes` : 'No especificada' },\n          { label: 'Estado', value: verModal.data.estado },\n          { label: 'Tipo', value: verModal.data.tipo || 'No especificado' }\n        ] : []}\n      />\n\n      <EditFormModal\n        isOpen={editarModal.isOpen}\n        onClose={editarModal.closeModal}\n        title=\"Editar Sede\"\n        onSubmit={async (formData) => {\n          // Validar capacidad_maxima si está presente\n          if (formData.capacidad_maxima !== undefined && formData.capacidad_maxima !== null && formData.capacidad_maxima !== '') {\n            const capacidad = Number(formData.capacidad_maxima);\n            if (isNaN(capacidad) || capacidad <= 0) {\n              throw new Error('La capacidad máxima debe ser un número positivo');\n            }\n          }\n          \n          const result = await dbService.updateSede(editarModal.data.id, formData);\n          if (result.error) {\n            throw new Error(result.error.message || 'Error al actualizar sede');\n          }\n          await loadSedes();\n        }}\n        initialData={editarModal.data}\n        fields={[\n          { name: 'nombre', label: 'Nombre', type: 'text', required: true },\n          { name: 'telefono', label: 'Teléfono', type: 'tel' },\n          { name: 'direccion', label: 'Dirección', type: 'textarea', required: true, fullWidth: true },\n          { name: 'capacidad_maxima', label: 'Capacidad Máxima', type: 'number', placeholder: 'Número de participantes', min: 1 },\n          { \n            name: 'estado', \n            label: 'Estado', \n            type: 'select',\n            options: [\n              { value: 'Activa', label: 'Activa' },\n              { value: 'Inactiva', label: 'Inactiva' }\n            ]\n          },\n          { \n            name: 'tipo', \n            label: 'Tipo', \n            type: 'select',\n            options: [\n              { value: 'Principal', label: 'Principal' },\n              { value: 'Secundaria', label: 'Secundaria' },\n              { value: 'Temporal', label: 'Temporal' }\n            ]\n          }\n        ]}\n      />\n\n      <CreateFormModal\n        isOpen={crearModal.isOpen}\n        onClose={crearModal.closeModal}\n        title=\"Nueva Sede\"\n        onSubmit={async (formData) => {\n          if (!formData.nombre?.trim() || !formData.direccion?.trim()) {\n            throw new Error('Nombre y dirección son campos obligatorios');\n          }\n          \n          // Validar capacidad_maxima si está presente\n          if (formData.capacidad_maxima !== undefined && formData.capacidad_maxima !== null && formData.capacidad_maxima !== '') {\n            const capacidad = Number(formData.capacidad_maxima);\n            if (isNaN(capacidad) || capacidad <= 0) {\n              throw new Error('La capacidad máxima debe ser un número positivo');\n            }\n          }\n          \n          const result = await dbService.createSede(formData);\n          if (result.error) {\n            throw new Error(result.error.message || 'Error al crear sede');\n          }\n          await loadSedes();\n        }}\n        initialData={{\n          nombre: '',\n          direccion: '',\n          telefono: '',\n          capacidad_maxima: '',\n          estado: 'Activa',\n          tipo: 'Principal'\n        }}\n        fields={[\n          { name: 'nombre', label: 'Nombre', type: 'text', required: true, placeholder: 'Nombre de la sede' },\n          { name: 'telefono', label: 'Teléfono', type: 'tel', placeholder: 'Número de teléfono' },\n          { name: 'direccion', label: 'Dirección', type: 'textarea', required: true, placeholder: 'Dirección completa de la sede', fullWidth: true },\n          { name: 'capacidad_maxima', label: 'Capacidad Máxima', type: 'number', placeholder: 'Número de participantes', min: 1 },\n          { \n            name: 'estado', \n            label: 'Estado', \n            type: 'select',\n            options: [\n              { value: 'Activa', label: 'Activa' },\n              { value: 'Inactiva', label: 'Inactiva' }\n            ]\n          },\n          { \n            name: 'tipo', \n            label: 'Tipo', \n            type: 'select',\n            options: [\n              { value: 'Principal', label: 'Principal' },\n              { value: 'Secundaria', label: 'Secundaria' },\n              { value: 'Temporal', label: 'Temporal' }\n            ]\n          }\n        ]}\n      />\n    </DashboardLayout>\n  );\n};\n\n// Wrap with React.memo to prevent unnecessary re-renders\n// Component will only re-render when props change\nconst Sedes = React.memo(SedesComponent);\n\nexport default Sedes;"],"names":["MapPlaceholder","_ref","address","className","_jsxs","concat","children","_jsx","substring","SedesComponent","sedes","setSedes","useState","loading","setLoading","error","setError","verModal","useModal","editarModal","crearModal","loadSedes","async","console","log","result","dbService","getSedes","Error","message","sedesData","Array","isArray","data","length","err","useEffect","filteredSedes","useMemo","statsData","title","value","icon","color","filter","s","estado","DashboardLayout","subtitle","loadingText","extraActions","onClick","openModal","StatsGrid","stats","columns","map","sede","setData","direccion","nombre","tipo","e","stopPropagation","StatusToggle","currentStatus","statuses","label","variant","onChange","newEstado","id","updateSede","toggleEstado","telefono","capacidad_maxima","ActionDropdown","actions","window","confirm","participantesResult","getParticipantes","participantesEnSede","p","id_sede","sede_id","sedeId","alert","deleteSede","handleDeleteSede","ViewDetailsModal","isOpen","onClose","closeModal","fullWidth","EditFormModal","onSubmit","undefined","formData","capacidad","Number","isNaN","initialData","fields","name","type","required","placeholder","min","options","CreateFormModal","_formData$nombre","_formData$direccion","trim","createSede","React"],"sourceRoot":""}